#############################################################################
# Templates for various files written by the phyloacc interface
#############################################################################

def phyloaccConfig():

    phyloacc_template = """PHYTREE_FILE {mod_file}
SEG_FILE {bed_file}
ALIGN_FILE {aln_file}
RESULT_FOLDER {outdir}{coal_tree_line}
PREFIX {batch}
BURNIN {burnin}
MCMC {mcmc}
CHAIN {chain}
TARGETSPECIES {targets}
OUTGROUP {outgroup}
CONSERVE {conserved}
GAPCHAR -
NUM_THREAD {procs_per_job}
VERBOSE 1
"""

    return phyloacc_template;

#############################################################################

def snakemake():

    smk_template = """#############################################################################
# Pipeline for running phyloacc per locus
# Generated from: {cmd}
# On: {dt}
#############################################################################

#############################################################################

import os 

#############################################################################

IQTREEDIR = config["iqtree_directory"];
ASTRALDIR = config["astral_directory"];

INDIR = config["input_directory"];
OUTDIR = config["output_directory"];
ST_BATCHES = config["st_batch_list"];
GT_BATCHES = config["gt_batch_list"];
# Inputs for the snakemake pipeline are read from the config file generated by
# the interface

#############################################################################

iqtree_loci = [ f.replace(".fa", "") for f in os.listdir(os.path.join(IQTREEDIR, "alns")) if f.endswith(".fa") ];

#############################################################################
# Final rule - rule that depends on final expected output file and initiates all
# the other rules

localrules: all

rule all:
    input:
        {run_char}expand(os.path.join(IQTREEDIR, "gene-trees", "{{locus}}", "{{locus}}.treefile"), locus=iqtree_loci),
        {run_char}os.path.join(IQTREEDIR, "gene-trees", "all-gene-trees.treefile"),
        {run_char}"{coal_tree_path}",
        expand(os.path.join(OUTDIR, "{{st_batch}}-phyloacc-st-out", "{{st_batch}}_elem_lik.txt"), st_batch=ST_BATCHES),
        expand(os.path.join(OUTDIR, "{{gt_batch}}-phyloacc-gt-out", "{{gt_batch}}_elem_lik.txt"), gt_batch=GT_BATCHES)
# This rule just checks that some of the phyloacc output files are present for each batch

#############################################################################
# Pipeline rules

rule run_iqtree:
    input:
        os.path.join(IQTREEDIR, "alns", "{{locus}}.fa")
    output:
       os.path.join(IQTREEDIR, "gene-trees", "{{locus}}", "{{locus}}.treefile")
    params:
        locus=os.path.abspath(os.path.join(IQTREEDIR, "gene-trees", "{{locus}}", "{{locus}}"))
    log:
        os.path.join(IQTREEDIR, "gene-trees", "{{locus}}", "{{locus}}.log")
    resources:
        cpus=1    
    shell:
        \"\"\"
        iqtree -s {{input}} --prefix {{params.locus}} -T {{resources.cpus}} -redo &> {{log}}
        \"\"\"    

rule combine_gene_trees:
    input:
        gene_trees = expand(os.path.join(IQTREEDIR, "gene-trees", "{{locus}}", "{{locus}}.treefile"), locus=iqtree_loci),
        gene_tree_dir = os.path.join(IQTREEDIR, "gene-trees")
    output:
        os.path.join(IQTREEDIR, "gene-trees", "all-gene-trees.treefile")
    shell:
        \"\"\"
        cat {{input.gene_tree_dir}}/*/*.treefile > {{output}}
        \"\"\"

rule run_astral:
    input:
        gene_trees = os.path.join(IQTREEDIR, "gene-trees", "all-gene-trees.treefile"),
        species_tree = os.path.join(ASTRALDIR, "input-species-tree.treefile")
    output:
        "{coal_tree_path}"
    log:
        os.path.join(ASTRALDIR, "astral-species-tree.log")
    shell:
        \"\"\"
        java -jar /n/home07/gthomas/env/pkgs/ASTRAL/Astral/astral.5.7.8.jar -q {{input.species_tree}} -i {{input.gene_trees}} -o {{output}} &> {{log}}
        \"\"\"

rule run_phyloacc:
    input:
        os.path.join(INDIR, "{{st_batch}}-st.cfg")
    output:
        os.path.join(OUTDIR, "{{st_batch}}-phyloacc-st-out", "{{st_batch}}_elem_lik.txt")
    log:
        os.path.join(OUTDIR, "{{st_batch}}-phyloacc-st-out", "{{st_batch}}-phyloacc.log")
    shell:
        \"\"\"
        {st_path} {{input}} &> {{log}}
        \"\"\"
        # Need to replace this with path to PhyloAcc on current install... depends on how we package the codebases together
        
rule run_phyloacc_gt:
    input:
        config = os.path.join(INDIR, "{{gt_batch}}-gt.cfg"),
        coal_tree = "{coal_tree_path}"
    output:
        os.path.join(OUTDIR, "{{gt_batch}}-phyloacc-gt-out", "{{gt_batch}}_elem_lik.txt")
    log:
        os.path.join(OUTDIR, "{{gt_batch}}-phyloacc-gt-out", "{{gt_batch}}-phyloacc.log")
    shell:
        \"\"\"
        {gt_path} {{input}} &> {{log}}
        \"\"\"

# This rule runs phyloacc on each batch individually. With a cluster profile
# each batch will be submitted as a job.

#############################################################################
"""

    return smk_template;

#############################################################################

def snakemakeConfig():
    
    config_template = """input_directory: {indir}
output_directory: {outdir}
st_batch_list: {st_batches}
gt_batch_list: {gt_batches}
iqtree_directory: {iqtree}
astral_directory: {astral}
"""

    return config_template;

#############################################################################

def snakemakeProfile():
    
    profile_template = """jobs: {num_jobs}
cluster:
  mkdir -p {cluster_logdir}/{{rule}}/ &&
  sbatch
  --partition={{resources.partition}}
  --nodes={{resources.nodes}}
  --cpus-per-task={{resources.cpus}}
  --job-name={{rule}}-{{wildcards}}
  --mem={{resources.mem}}
  --time={{resources.time}}
  --output={cluster_logdir}/{{rule}}/{{rule}}-{{wildcards}}-%j.out
default-resources:
  - partition='{part}'
  - nodes='{num_nodes}'
  - mem='{mem}g'
  - time='{time}'
  - cpus={procs_per_job}
latency-wait: 30
verbose: true
"""

    return profile_template;

#############################################################################